name: Deploy to Azure App Service (Publish Profile)

on:
  push:
    branches:
      - main
      - new-main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          # Temporarily disable npm cache to avoid initial setup issues
          # cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Create production env file
        run: |
          cat > .env.production << EOL
          # Production environment variables for Azure
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          PORT=8080
          ${{ secrets.ADDITIONAL_ENV_VARS }}
          EOL

      - name: Run Prisma generate
        run: npx prisma generate
        
      - name: Build for Azure
        run: |
          # Create a copy of azure config as next.config.js temporarily
          cp next.config.azure.js next.config.js.bak
          cp next.config.azure.js next.config.js
          
          # Run the build
          npm run build
          
          # Restore original next.config.js
          mv next.config.js.bak next.config.js
        env:
          NODE_ENV: production
      
      - name: Azure Post-Build Tasks
        run: |
          echo "Running Azure post-build tasks..."
          # Check if .next directory exists
          if [ ! -d ".next" ]; then
            echo "Error: .next directory does not exist. Build may have failed."
            exit 1
          fi
          
          # Check if standalone directory exists, create if not
          if [ ! -d ".next/standalone" ]; then
            echo "Creating missing standalone directory..."
            mkdir -p .next/standalone
          fi
          
          # Ensure server.js is included in the deployment
          cp server.js .next/standalone/
          # Copy Azure-specific configuration
          cp next.config.azure.js .next/standalone/
          # Copy web.config for IIS
          cp web.config .next/standalone/
          
          # Copy public assets if the directory exists
          if [ -d "public" ]; then
            echo "Copying public directory..."
            cp -r public .next/standalone/
          else
            echo "Note: public directory does not exist, creating empty one."
            mkdir -p .next/standalone/public
          fi
          
          # Copy app directory assets if they exist (for images, etc.)
          if [ -d "app" ]; then
            echo "Copying app directory for assets..."
            mkdir -p .next/standalone/app
            # Only copy asset files, not code
            find app -type f -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" -o -name "*.ico" -o -name "*.gif" | xargs -I{} cp --parents {} .next/standalone/
          fi
          
          # Create .next directory inside standalone if it doesn't exist
          mkdir -p .next/standalone/.next
          
          # Copy static assets if they exist
          if [ -d ".next/static" ]; then
            cp -r .next/static .next/standalone/.next/
          else
            echo "Warning: .next/static directory not found."
          fi

      # Create a deployment package
      - name: Create deployment package
        run: |
          cd .next/standalone
          zip -r ../../deploy.zip .
          cd ../..
          
      # Deploy using Kudu Zip Deploy API with publish profile credentials
      - name: Deploy to Azure App Service using Kudu API
        run: |
          # Extract deployment credentials from publish profile
          echo "${{ secrets.AZURE_PUBLISH_PROFILE }}" > publishprofile.xml
          
          # Debug: Show first few lines of the profile
          echo "Analyzing publish profile..."
          head -20 publishprofile.xml
          
          # Use xmllint to parse the XML properly
          # Install xmllint if not available
          sudo apt-get update && sudo apt-get install -y libxml2-utils
          
          # Extract credentials from the first publishProfile with publishMethod="ZipDeploy"
          DEPLOY_USER=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userName)" publishprofile.xml)
          DEPLOY_PASS=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@userPWD)" publishprofile.xml)
          PUBLISH_URL=$(xmllint --xpath "string(//publishProfile[@publishMethod='ZipDeploy']/@publishUrl)" publishprofile.xml)
          
          echo "Found publish URL: $PUBLISH_URL"
          
          # Construct the Kudu ZIP Deploy URL
          if [ -n "$PUBLISH_URL" ]; then
            # Remove port if present and construct Kudu URL
            KUDU_HOST=$(echo "$PUBLISH_URL" | sed 's/:443//')
            KUDU_URL="https://${KUDU_HOST}/api/zipdeploy"
          else
            echo "ERROR: Could not extract publish URL from profile"
            echo "Trying alternative method with app name..."
            # Fallback to using AZURE_APP_NAME if available
            if [ -n "${{ secrets.AZURE_APP_NAME }}" ]; then
              KUDU_URL="https://${{ secrets.AZURE_APP_NAME }}.scm.azurewebsites.net/api/zipdeploy"
            else
              echo "ERROR: No AZURE_APP_NAME secret set"
              exit 1
            fi
          fi
          
          echo "Extracted credentials successfully"
          echo "Deploying to: $KUDU_URL"
          
          # Verify credentials are not empty
          if [ -z "$DEPLOY_USER" ] || [ -z "$DEPLOY_PASS" ]; then
            echo "ERROR: Could not extract credentials from publish profile"
            echo "Username: ${DEPLOY_USER:0:5}..."
            exit 1
          fi
          
          # Deploy using Kudu API with basic auth
          echo "Starting deployment..."
          HTTP_CODE=$(curl -X POST \
            --user "$DEPLOY_USER:$DEPLOY_PASS" \
            --data-binary @deploy.zip \
            -H "Content-Type: application/zip" \
            -w "%{http_code}" \
            -o deploy_response.txt \
            -s \
            "$KUDU_URL")
          
          echo "HTTP Response Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 202 ]; then
            echo "✓ Deployment successful!"
            cat deploy_response.txt
          else
            echo "✗ Deployment failed with HTTP code: $HTTP_CODE"
            echo "Response:"
            cat deploy_response.txt
            exit 1
          fi
          
          # Clean up
          rm publishprofile.xml deploy_response.txt
          echo "Deployment completed!"