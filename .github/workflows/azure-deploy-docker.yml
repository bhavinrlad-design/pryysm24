name: Deploy to Azure (Docker)

on:
  push:
    branches:
      - main
      - new-main
  workflow_dispatch:

permissions:
  contents: read

env:
  REGISTRY_NAME: pryysm
  REPOSITORY: pryysm-v2-app
  DOCKER_BUILDKIT: 1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          PRISMA_SKIP_POSTINSTALL: "true"

      - name: Create production env file
        run: |
          cat > .env.production << EOL
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          PORT=8080
          SKIP_ENV_VALIDATION=true
          EOL

      - name: Build Next.js
        run: npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: "true"
          PRISMA_SKIP_POSTINSTALL: "true"

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          az acr login --name ${{ env.REGISTRY_NAME }}

      - name: Build and push Docker image
        run: |
          IMAGE_TAG="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.REPOSITORY }}:${{ github.sha }}"
          docker build -t "$IMAGE_TAG" -t "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.REPOSITORY }}:latest" .
          docker push "$IMAGE_TAG"
          docker push "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.REPOSITORY }}:latest"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Deploy to App Service
        run: |
          az webapp config container set \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name "${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.REPOSITORY }}:latest" \
            --docker-registry-server-url "https://${{ env.REGISTRY_NAME }}.azurecr.io" \
            --docker-registry-server-user $(az acr credential show -n ${{ env.REGISTRY_NAME }} --query username -o tsv) \
            --docker-registry-server-password $(az acr credential show -n ${{ env.REGISTRY_NAME }} --query "passwords[0].value" -o tsv)

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
      - name: Verify deployment
        run: |
          URL="https://${{ secrets.AZURE_APP_NAME }}.azurewebsites.net/health"
          for i in {1..30}; do
            echo "Health check attempt $i..."
            if curl -f -s "$URL" > /dev/null; then
              echo "âœ“ App is healthy!"
              exit 0
            fi
            sleep 5
          done
          echo "Warning: App not responding yet, but Docker should be running"

      - name: Logout from Azure
        run: az logout
        if: always()
