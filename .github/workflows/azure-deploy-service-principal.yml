name: Deploy to Azure (Service Principal - Legacy)

on:
  push:
    branches:
      - main
      - new-main
  workflow_dispatch:

permissions:
  contents: read

env:
  AZURE_WEBAPP_NAME: ${{ secrets.AZURE_APP_NAME }}
  NODE_VERSION: '20'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install with PRISMA_SKIP_POSTINSTALL to prevent client generation
          npm install
        env:
          PRISMA_SKIP_POSTINSTALL: "true"

      - name: Create production env file
        run: |
          cat > .env.production << EOL
          # Production environment variables for Azure
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          PORT=8080
          SKIP_ENV_VALIDATION=true
          SKIP_ESLINT_VALIDATION=true
          SKIP_PRISMA_VALIDATION=true
          EOL

      - name: Build for Azure
        run: |
          # Run the build with STATIC export output
          npm run build
        env:
          NODE_ENV: production
          SKIP_ENV_VALIDATION: "true"
          PRISMA_SKIP_POSTINSTALL: "true"
      
      - name: Azure Post-Build Tasks
        run: |
          echo "Running Azure post-build tasks for static export..."
          
          # Check if out directory exists (static export output)
          if [ ! -d "out" ]; then
            echo "Error: 'out' directory does not exist. Build may have failed or app uses wrong output mode."
            exit 1
          fi
          
          echo "Copying deployment files..."
          # Copy entry point files to root
          cp index.js out/
          cp server-export.js out/
          cp web.config out/
          
          # Copy public assets if they exist
          if [ -d "public" ]; then
            echo "Copying public directory..."
            cp -r public/* out/ 2>/dev/null || true
          fi
          
          echo "✓ Build preparation complete"

      # Login to Azure using Service Principal (Legacy method)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Create a deployment package
      - name: Create deployment package
        run: |
          cd out
          zip -r ../../deploy.zip .
          cd ../..
          echo "Deployment package created"
      # Deploy using Azure CLI
      - name: Deploy to Azure App Service using Azure CLI
        run: |
          echo "Starting deployment with Azure CLI..."
          
          # Deploy the ZIP file using Azure CLI
          az webapp deployment source config-zip \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --src deploy.zip \
            --timeout 300
          
          echo "✓ Deployment completed successfully!"
          echo "Your app should be available at: https://${{ secrets.AZURE_APP_NAME }}.azurewebsites.net"
      
      # Configure App Startup
      - name: Configure App Startup  
        run: |
          echo "Configuring app settings..."
          
          # Set startup command
          az webapp config set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --startup-file "node index.js" \
            --remote-debugging-enabled false
          
          # Set environment variables and disable health check to allow startup
          az webapp config appsettings set \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name ${{ secrets.AZURE_APP_NAME }} \
            --settings NODE_ENV=production WEBSITE_HEALTHCHECK_MAXPINGFAILURES=50
          
          echo "✓ App configured!"
          
      # Logout from Azure
      - name: Logout from Azure
        run: az logout
        if: always()
