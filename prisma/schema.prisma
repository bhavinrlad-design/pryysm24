
// Use SQL Server for both local development and production
// Prisma provider must match the DATABASE_URL connection string
// For local development with SQL Server: Use LocalDB or SQL Server Express
// For production on Azure: Use Azure SQL Server (provided via GitHub Secret)

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  name          String?
  passwordHash  String?
  emailVerified DateTime?
  image         String?
  role          String     @default("admin") // admin or master
  companyName   String?
  numPrinters   String?
  country       String?
  industry      String?
  avatar        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  sessions_old  Session_Old[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Keep old Session model for backward compatibility
model Session_Old {
  id            String     @id @default(cuid())
  sessionToken  String     @unique
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires       DateTime
  createdAt     DateTime   @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Printer {
  id        Int     @id @default(autoincrement())
  name      String
  status    String
  ipAddress String?
  location  String?
  prints    PrintJob[]
}

model Material {
  id       Int     @id @default(autoincrement())
  name     String
  type     String?
  color    String?
  quantity Float?
  prints   PrintJob[]
}

model PrintJob {
  id          Int       @id @default(autoincrement())
  name        String
  status      String
  fileUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  printer     Printer   @relation(fields: [printerId], references: [id])
  printerId   Int
  material    Material  @relation(fields: [materialId], references: [id])
  materialId  Int
}
